
Aus Designer:
XY1.CustomAxes
XY1.SerienGroups


Ini:

if(Curves[0]==NULL) Curves[0]=new TLineSeries(this); else ((TLineSeries*)Curves[0])->Clear();

	((TLineSeries*)Curves[0])->Title="D-Max Rollen";
	((TLineSeries*)Curves[0])->ParentChart=XY1;
	((TLineSeries*)Curves[0])->LinePen->Width=2;
	((TLineSeries*)Curves[0])->SeriesColor=clBlack;

if(Curves[1]==NULL) Curves[1]=new TBubbleSeries(this); ...
	
-->Unterschiede zu beiden ?
ANTWORT:


==============================================

 TFrameF003::UpdateXY(void)
 ...
  k=0; val=QQ->FieldByName("W15")->AsInteger; yval=double(val-ref);
   if(k<maxk)          ((TLineSeries*)Curves[k])->AddXY(xval,yval);

   k=1; val=QQ->FieldByName("W60")->AsInteger; yval=double(val-ref);
   if(k<maxk && val>0) ((TBubbleSeries*)Curves[k])->AddBubble(xval,yval,1.5);
 
 k=MAX_WIMA_CURVES+4; val=QQ->FieldByName("W80")->AsInteger; yval=double(val-dmaxMan);
	   if(k<maxk) ((TBubbleSeries*)Curves[k])->AddBubble(xval,yval,1.5);
 ...
 ZU statisch ? es gibt kein + 5

==============================================

object XY1: TChart
        AlignWithMargins = True
        Left = 6
        Top = 19
        Width = 455
        Height = 211
        Margins.Left = 5
        Margins.Top = 0
        Legend.Color = 15066597
        Legend.Font.Name = 'Verdana'
        Legend.GlobalTransparency = 10
        Legend.HorizMargin = -75
        Legend.LegendStyle = lsSeries
        Legend.PositionUnits = muPercent
        Legend.ResizeChart = False
        Legend.Shadow.Transparency = 0
        Legend.Symbol.Pen.Visible = False
        Legend.TopPos = 5
        Legend.VertMargin = -75
        MarginBottom = 0
        MarginLeft = 2
        MarginRight = 4
        MarginTop = 0
        Title.AutoSize = False
        Title.Text.Strings = (
          'TChart')
        Title.AdjustFrame = False
        BottomAxis.Automatic = False
        BottomAxis.AutomaticMaximum = False
        BottomAxis.AutomaticMinimum = False
        BottomAxis.Axis.Width = 1
        BottomAxis.Grid.Color = clGray
        BottomAxis.Increment = 10.000000000000000000
        BottomAxis.Maximum = 130.000000000000000000
        BottomAxis.MinorGrid.Color = 12500670
        BottomAxis.MinorGrid.Visible = True
        BottomAxis.MinorTickCount = 9
        BottomAxis.MinorTicks.Color = 11053224
        BottomAxis.MinorTicks.Visible = False
        DepthAxis.Axis.Width = 1
        DepthAxis.Grid.Color = clGray
        DepthAxis.MinorTicks.Visible = False
        DepthAxis.TicksInner.Visible = False
        DepthTopAxis.Axis.Width = 1
        DepthTopAxis.Grid.Color = clGray
        DepthTopAxis.MinorTicks.Visible = False
        DepthTopAxis.TicksInner.Visible = False
        LeftAxis.Automatic = False
        LeftAxis.AutomaticMaximum = False
        LeftAxis.AutomaticMinimum = False
        LeftAxis.Axis.Width = 1
        LeftAxis.Grid.Color = clGray
        LeftAxis.Increment = 10.000000000000000000
        LeftAxis.Maximum = 40.000000000000000000
        LeftAxis.Minimum = -40.000000000000000000
        LeftAxis.MinorTicks.Visible = False
        LeftAxis.TicksInner.Visible = False
        LeftAxis.Title.Caption = 'Differenz Ist-Soll-Durchmesser [1/10 mm]'
        RightAxis.Axis.Width = 1
        RightAxis.Grid.Color = clGray
        RightAxis.MinorTicks.Visible = False
        RightAxis.TicksInner.Visible = False
        TopAxis.Axis.Width = 1
        TopAxis.Grid.Color = clGray
        TopAxis.MinorTicks.Visible = False
        TopAxis.TicksInner.Visible = False
        View3D = False
        OnBeforeDrawAxes = XY1BeforeDrawAxes
        Align = alBottom
        BevelOuter = bvNone
        UseDockManager = False
        TabOrder = 1
        DefaultCanvas = 'TGDIPlusCanvas'
        ColorPaletteIndex = 0
      end

>>===============================================

2. Ereignis-Handler in der CPP-Datei implementieren
Implementieren Sie den Ereignis-Handler XY1ClickLegend in Ihrer CPP-Datei:

cpp
Code kopieren
#include <VclTee.TeeProcs.hpp>
#include <VclTee.Chart.hpp>
#include <VclTee.TeEngine.hpp>
#include <VclTee.Series.hpp>

void __fastcall TForm1::XY1ClickLegend(TCustomChart *Sender, TLegendClickArgs &Args)
{
    // Bestimmen Sie die angeklickte Serie
    TChartSeries *clickedSeries = XY1->Series[Args.SeriesIndex];

    // Ändern Sie die Farbe der Serie
    clickedSeries->Color = clRed; // Beispiel: Ändert die Farbe auf Rot

    // Optional: Aktualisieren Sie das Diagramm, um die Änderung anzuzeigen
    XY1->Repaint();
}
Erklärung
TLegendClickArgs &Args: Dieses Argument enthält Informationen über den angeklickten Legenden-Eintrag, wie z.B. SeriesIndex, das den Index der angeklickten Serie angibt.
*TChartSeries clickedSeries: Mit Args.SeriesIndex können Sie die Serie abrufen, auf die in der Legende geklickt wurde.
clickedSeries->Color: Hier ändern Sie die Farbe der Serie. Sie können clRed durch jede beliebige Farbe oder eine Zufallsfarbe ersetzen.
3. Beispiel
Hier ist ein vollständiges Beispiel, das die Farbe der Serie beim Klicken auf die Legende ändert:

cpp
Code kopieren
void __fastcall TForm1::XY1ClickLegend(TCustomChart *Sender, TLegendClickArgs &Args)
{
    TChartSeries *clickedSeries = XY1->Series[Args.SeriesIndex];

    // Beispiel: Ändert die Farbe auf eine zufällige Farbe
    clickedSeries->Color = RGB(rand() % 256, rand() % 256, rand() % 256);

    XY1->Repaint(); // Aktualisieren des Diagramms
}

=================================================================

void __fastcall TFrameF003::XY1OnClickLegend(TCustomChart *Sender, TMouseButton Button,
                                              TShiftState Shift, int X, int Y)
{
    // Bestimmen, welcher Legenden-Eintrag angeklickt wurde
    int index = XY1->Legend->Click(X, Y);

    if (index != -1) // Wenn ein gültiger Eintrag angeklickt wurde
    {
        TChartSeries *clickedSeries = XY1->Series[index];

        // Ändern der Farbe der Serie
        clickedSeries->Color = clBlue; // Beispiel: Ändert die Farbe auf Blau

        // Diagramm aktualisieren
        XY1->Repaint();
    }
}

//======================================================================

Um die Blase im Diagramm zu färben, ohne die Farbe in der Legendenliste zu ändern, kannst du die Farbe der Blase dynamisch zur Laufzeit ändern, während du die Standardfarbe in der Legende beibehältst. Eine Möglichkeit, dies zu erreichen, besteht darin, das OnGetSeriesMark-Ereignis oder OnBeforeDrawSeries-Ereignis zu verwenden, um die Farbe der Blasen direkt zu ändern.

Hier ist ein Beispiel:

Methode 1: Verwenden des OnGetSeriesMark-Ereignisses
Das OnGetSeriesMark-Ereignis wird aufgerufen, bevor eine Markierung für eine Serie gezeichnet wird. Du kannst die Farbe der Blase ändern, ohne die Legendenfarbe zu beeinflussen.

cpp
Code kopieren
void __fastcall TForm1::Chart1GetSeriesMark(TChartSeries *Sender, int ValueIndex, UnicodeString &MarkText)
{
    if (Sender->ClassType() == __classid(TBubbleSeries))
    {
        // Erhalte die Serie und ändere die Farbe der Blase
        TBubbleSeries *bubbleSeries = static_cast<TBubbleSeries*>(Sender);
        bubbleSeries->ValueColor[ValueIndex] = clRed;  // Beispiel: Setze die Blasenfarbe auf Rot
    }
}
Methode 2: Verwenden des OnBeforeDrawSeries-Ereignisses
Das OnBeforeDrawSeries-Ereignis wird aufgerufen, bevor die Serie gezeichnet wird. Du kannst hier die Blasenfarbe setzen, ohne dass sich dies auf die Farbe in der Legende auswirkt.

cpp
Code kopieren
void __fastcall TForm1::Chart1BeforeDrawSeries(TObject *Sender)
{
    for (int i = 0; i < Chart1->SeriesCount(); i++)
    {
        TChartSeries *series = Chart1->Series[i];
        if (series->ClassType() == __classid(TBubbleSeries))
        {
            TBubbleSeries *bubbleSeries = static_cast<TBubbleSeries*>(series);
            for (int j = 0; j < bubbleSeries->Count(); j++)
            {
                // Setze die Farbe der Blase (z.B. abhängig vom Wert)
                bubbleSeries->ValueColor[j] = clRed;  // Beispiel: Setze die Blasenfarbe auf Rot
            }
        }
    }
}
Anwendung:
Chart1GetSeriesMark: Nutze diese Methode, wenn du gezielt die Markierung der Serie manipulieren willst.
Chart1BeforeDrawSeries: Diese Methode erlaubt dir, vor dem Zeichnen der Serien die Farben der Blasen zu ändern.
Erklärung:
ValueColor[ValueIndex]: Diese Eigenschaft ermöglicht es, die Farbe eines bestimmten Wertes (hier eine Blase) zu setzen.
clRed: Beispielhafte Farbe, die du auf die Blase anwendest. Du kannst sie durch eine andere Farbe ersetzen.
Wichtig:
Diese Techniken ändern die Farbe der Blasen in der Darstellung, aber die Farbe der Legende bleibt unverändert.
Wenn du die Blasenfarbe dynamisch änderst, kannst du die Anzeige so steuern, dass nur die Blasenfarbe ohne Beeinflussung der Legende geändert wird.
Wenn du diese Ansätze verwendest, kannst du sicherstellen, dass die Farbe der Blasen im Diagramm unabhängig von der Farbe in der Legendenliste geändert wird.

//===============================================

void __fastcall TForm1::Chart1BeforeDrawSeries(TObject *Sender)
{
    double sollwert = 10.0; // Beispiel für einen Sollwert

    for (int i = 0; i < Chart1->SeriesCount(); i++)
    {
        TChartSeries *series = Chart1->Series[i];
        if (series->ClassType() == __classid(TBubbleSeries))
        {
            TBubbleSeries *bubbleSeries = static_cast<TBubbleSeries*>(series);

            // Originalfarbe der Serie speichern
            TColor originalColor = bubbleSeries->SeriesColor;

            // Setze die Farbe der Blasen basierend auf der Differenz zum Sollwert
            for (int j = 0; j < bubbleSeries->Count(); j++)
            {
                double yWert = bubbleSeries->YValues->Value[j];

                // Berechne die Differenz zum Sollwert
                double differenz = fabs(yWert - sollwert);

                // Bestimme die Farbe basierend auf der Differenz
                if (differenz < 5)
                    bubbleSeries->ValueColor[j] = clGreen;  // Beispiel: Differenz klein -> Grün
                else if (differenz < 10)
                    bubbleSeries->ValueColor[j] = clYellow; // Beispiel: Differenz mittel -> Gelb
                else
                    bubbleSeries->ValueColor[j] = clRed;    // Beispiel: Differenz groß -> Rot
            }

            // Setze die Farbe der Legende zurück
            bubbleSeries->SeriesColor = originalColor;
        }
    }
}

//=======================================================

class TriValues
{
public:
    int first;
    int second;
    int third;

    // Standardkonstruktor
    TriValues() : first(0), second(0), third(0) {}

    // Konstruktor mit Initialisierung
    TriValues(int f, int s, int t) : first(f), second(s), third(t) {}

    // Methoden für den Zugriff
    int getFirst() const { return first; }
    int getSecond() const { return second; }
    int getThird() const { return third; }

    // Methoden zum Setzen der Werte
    void setFirst(int value) { first = value; }
    void setSecond(int value) { second = value; }
    void setThird(int value) { third = value; }
};

// Beispielnutzung
TriValues values(1, 2, 3);

std::cout << "First: " << values.getFirst() << std::endl;
std::cout << "Second: " << values.getSecond() << std::endl;
std::cout << "Third: " << values.getThird() << std::endl;




std::vector<TriValues> triValuesList;

// Beispiel: Hinzufügen von TriValues-Paaren zur Liste
triValuesList.push_back(TriValues(1, 2, 3));
triValuesList.push_back(TriValues(4, 5, 6));
triValuesList.push_back(TriValues(7, 8, 9));

// Lauf durch die Serien
for (int i = 0; i < Chart1->SeriesCount(); i++)
{
    TChartSeries *series = Chart1->Series[i];

    TBubbleSeries *bubbleSeries = dynamic_cast<TBubbleSeries*>(series);

    if (bubbleSeries != nullptr)
    {
        for (int j = 0; j < bubbleSeries->Count(); j++)
        {
            int index = i * bubbleSeries->Count() + j;

            // Zugriff auf das entsprechende TriValues-Paar
            TriValues triValue = triValuesList[index];

            // Beispielhafter Zugriff auf die Werte
            int firstValue = triValue.getFirst();
            int secondValue = triValue.getSecond();
            int thirdValue = triValue.getThird();

            // Logik zur Farbgebung oder anderen Aktionen basierend auf den Werten
            if (firstValue > 10)
                bubbleSeries->ValueColor[j] = clRed;
            else if (secondValue > 5)
                bubbleSeries->ValueColor[j] = clYellow;
            else
                bubbleSeries->ValueColor[j] = clGreen;
        }
    }
}

