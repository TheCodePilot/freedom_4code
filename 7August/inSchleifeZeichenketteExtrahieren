#include <vcl.h>
#include <iostream>
#include <string>
#include <vector>

#pragma hdrstop

#pragma argsused

std::vector<std::string> extractNumbers(const std::string& str) {
    std::vector<std::string> numbers;
    std::string::size_type start = 0;
    std::string::size_type end = 0;

    while ((end = str.find("  ", start)) != std::string::npos) {
        numbers.push_back(str.substr(start, end - start));
        start = end + 2;  // Überspringen der zwei Leerzeichen
    }

    // Falls am Ende noch eine Zahl steht, die nicht von zwei Leerzeichen gefolgt wird
    if (start < str.size()) {
        numbers.push_back(str.substr(start));
    }

    return numbers;
}

int main() {
    std::string input = "123456  789123  111333  ";
    std::vector<std::string> numbers = extractNumbers(input);

    for (size_t i = 0; i < numbers.size(); ++i) {
        std::cout << "Nummer " << i + 1 << ": " << numbers[i] << std::endl;
    }

    return 0;
}


//=======================================================================

Guten Morgen! Um zu verhindern, dass das TDBNextGrid nach der Eingabe automatisch in das erste linke obere Feld der Tabelle springt, müssen Sie sicherstellen, dass der Fokus nach der Eingabe erhalten bleibt oder auf eine spezifische Zelle gesetzt wird.

Eine Möglichkeit, dies zu erreichen, besteht darin, das Ereignis OnCellEditExit oder ähnliche Ereignisse zu verwenden, um das Springen zu verhindern. Hier ist ein Beispiel, wie Sie dies im C++ Builder umsetzen können:

Beispielcode
Angenommen, Sie haben ein Formular mit einem TDBNextGrid-Steuerelement namens DBNextGrid1.

Hinzufügen der Ereignisbehandlungsroutine für OnCellEditExit:

Fügen Sie im Header Ihres Formulars die Deklaration der Ereignisbehandlungsroutine hinzu:

cpp
Code kopieren
void __fastcall DBNextGrid1CellEditExit(TObject *Sender, int Col, int Row);
Implementierung der Ereignisbehandlungsroutine im cpp-File:

cpp
Code kopieren
void __fastcall TForm1::DBNextGrid1CellEditExit(TObject *Sender, int Col, int Row)
{
    // Stellen Sie sicher, dass der Fokus in der aktuellen Zelle bleibt
    DBNextGrid1->SetFocus();
    DBNextGrid1->Row = Row;
    DBNextGrid1->Col = Col;
}
Verknüpfen des Ereignisses mit dem Grid:

Verknüpfen Sie die Ereignisbehandlungsroutine im Konstruktor Ihres Formulars oder in der IDE:

cpp
Code kopieren
__fastcall TForm1::TForm1(TComponent* Owner)
    : TForm(Owner)
{
    DBNextGrid1->OnCellEditExit = DBNextGrid1CellEditExit;
}
Erklärung
Ereignisbehandlungsroutine für OnCellEditExit:

Diese Routine wird aufgerufen, wenn der Benutzer die Bearbeitung einer Zelle beendet.
Die Methode DBNextGrid1->SetFocus() stellt sicher, dass der Fokus im Grid bleibt.
Die Eigenschaften DBNextGrid1->Row und DBNextGrid1->Col werden auf die aktuellen Zeilen- und Spaltenwerte gesetzt, um den Fokus in der aktuellen Zelle zu halten.
Verknüpfung des Ereignisses:

Die Ereignisbehandlungsroutine wird mit dem OnCellEditExit-Ereignis des Grids verknüpft, sodass sie aufgerufen wird, wenn die Bearbeitung einer Zelle beendet wird.
Mit diesen Anpassungen sollte das TDBNextGrid nach der Eingabe nicht mehr automatisch in das erste linke obere Feld springen, sondern in der aktuellen Zelle bleiben.

//===========================

object TABwnr: TNextDBGrid
      Touch.InteractiveGestures = [igPan, igPressAndTap]
      Touch.InteractiveGestureOptions = [igoPanSingleFingerHorizontal, igoPanSingleFingerVertical, igoPanInertia, igoPanGutter, igoParentPassthrough]
      Align = alClient
      BorderStyle = bsNone
      HeaderStyle = hsFlatBorders
InputEnterMode = imAllways
      Options = [goArrowKeyExitEditing, goEscClearEdit, goGrid, goHeader, goSecondClickEdit, goInplaceEditEvents]
      TabOrder = 0
      TabStop = True
?OnKeyUp = TABwnrKeyUp
?DataAwareOptions = [doAddColumns, doAutoAssignFieldName]
      DataSource = DSRC
	  
object table1: TNextDBGrid
    Touch.InteractiveGestures = [igPan, igPressAndTap]
    Touch.InteractiveGestureOptions = [igoPanSingleFingerHorizontal, igoPanSingleFingerVertical, igoPanInertia, igoPanGutter, igoParentPassthrough]
AutoScroll = True
    BorderStyle = bsNone
    Font.Charset = DEFAULT_CHARSET
    Font.Color = clWindowText
    Font.Height = -11
    Font.Name = 'Tahoma'
    Font.Style = [fsBold]
    GridLinesColor = clSilver
    HeaderStyle = hsOutlook
Options = [goGrid, goHeader]
    ParentFont = False
TabOrder = 1
    TabStop = True
    
  end	  

//===========================================
