"#pragma link "MidasLib"" kann ich so etwas auch als Debug-Version kompilieren damit die Midas.DLL nicht auf fremden Rechnern gebraucht wird um dort das Programm ausf√ºhren zu k√∂nnen ?
Ja, du kannst dein Programm so kompilieren, dass die Midas-DLL nicht auf fremden Rechnern ben√∂tigt wird. Dazu musst du die statische Link-Bibliothek MidasLib direkt in deine Anwendung einbinden.

Wenn du in Delphi arbeitest, kannst du einfach die Compiler-Direktive #pragma link "MidasLib" oder das entsprechende {$LIBRARY MidasLib} nutzen, um die ben√∂tigten Midas-Funktionen direkt mit deinem Programm zu verkn√ºpfen. Dadurch wird die Midas-DLL nicht mehr als externe Abh√§ngigkeit ben√∂tigt.

Falls du eine Debug-Version erstellen m√∂chtest, kannst du sicherstellen, dass du die richtige Konfiguration in den Projektoptionen verwendest. Achte darauf, dass die Debug-Informationen aktiviert sind und dass du nicht die Laufzeitbibliotheken als externe DLLs nutzt.

M√∂chtest du eine detaillierte Anleitung f√ºr deine spezielle Delphi-Version? üòä

Ich arbeite mit C++03 mit dem BCC32
Ah, du arbeitest mit C++03 und dem Borland C++ Compiler (BCC32)! In diesem Fall kannst du die MidasLib statisch verlinken, indem du sicherstellst, dass die Midas-Funktionen direkt in dein Programm eingebunden werden, anstatt die Midas.dll als externe Abh√§ngigkeit zu ben√∂tigen.

Versuche Folgendes:

Statische Verlinkung aktivieren: Stelle sicher, dass du #pragma link "MidasLib" in deinem Code verwendest.

MidasLib hinzuf√ºgen: Pr√ºfe, ob du die passende MidasLib.lib in dein Projekt einbindest (√ºber die Linker-Optionen oder direkt im Quellcode).

Compiler-Optionen anpassen: Manchmal erfordert BCC32 zus√§tzliche Einstellungen, um statisch zu verlinken. Du kannst in den Linker-Einstellungen sicherstellen, dass die Option Use dynamic RTL deaktiviert ist.

Debug-Version erzeugen: Falls du eine Debug-Version ben√∂tigst, achte darauf, dass du Debug-Informationen einbindest, aber die statische Verlinkung beibeh√§ltst.

Falls du mit spezifischen Problemen beim Linken k√§mpfst, lass es mich wissen! üòä

"MidasLib hinzuf√ºgen: Pr√ºfe, ob du die passende MidasLib.lib in dein Projekt einbindest (√ºber die Linker-Optionen oder direkt im Quellcode). Compiler-Optionen anpassen: Manchmal erfordert BCC32 zus√§tzliche Einstellungen, um statisch zu verlinken. Du kannst in den Linker-Einstellungen sicherstellen, dass die Option Use dynamic RTL deaktiviert ist. Debug-Version erzeugen: Falls du eine Debug-Version ben√∂tigst, achte darauf, dass du Debug-Informationen einbindest, aber die statische Verlinkung beibeh√§ltst." Bitte hier genauer erkl√§ren und woher bekomme ich die MidasLib.liob ?
Hier sind genauere Erkl√§rungen zu den einzelnen Schritten:

1. MidasLib hinzuf√ºgen
Die Datei MidasLib.lib ist eine statische Bibliothek, die du in dein Projekt einbinden kannst, um die Abh√§ngigkeit von Midas.dll zu vermeiden. Um sie zu nutzen:

Stelle sicher, dass du #pragma link "MidasLib" in deinem Code verwendest.

Falls du die Datei manuell einbinden m√∂chtest, kannst du sie in den Linker-Optionen deines Projekts hinzuf√ºgen.

Pr√ºfe, ob die Datei MidasLib.lib in deinem Compiler-Verzeichnis vorhanden ist. Falls nicht, kannst du sie m√∂glicherweise aus einer Delphi-Installation beziehen oder aus einer passenden Bibliothek f√ºr BCC32 extrahieren2.

2. Compiler-Optionen anpassen
Damit dein Programm statisch verlinkt wird und nicht auf Midas.dll angewiesen ist:

√ñffne die Projektoptionen in deiner Entwicklungsumgebung.

Gehe zu den Linker-Einstellungen.

Stelle sicher, dass die Option "Use dynamic RTL" deaktiviert ist. Diese Option sorgt daf√ºr, dass die Laufzeitbibliotheken statisch eingebunden werden, anstatt sie als separate DLLs zu laden.

3. Debug-Version erzeugen
Falls du eine Debug-Version ben√∂tigst:

Aktiviere die Debug-Informationen in den Compiler-Optionen.

Stelle sicher, dass du weiterhin die statische Verlinkung beibeh√§ltst, damit Midas.dll nicht ben√∂tigt wird.

Falls du Probleme beim Debuggen hast, kannst du versuchen, die Debug-Symbole (.pdb oder .map-Dateien) zu generieren, um eine bessere Fehleranalyse zu erm√∂glichen.

Woher bekomme ich MidasLib.lib?
Die Datei MidasLib.lib ist normalerweise Teil der Delphi- oder C++Builder-Installation. Falls du sie nicht findest:

Pr√ºfe die Bibliotheksverzeichnisse deiner Entwicklungsumgebung.

Falls du Delphi installiert hast, kannst du die Datei m√∂glicherweise aus den Delphi-Libraries extrahieren.

Es gibt einige Online-Ressourcen, die sich mit MidasLib besch√§ftigen, wie Delphi-PRAXiS oder Stack Overflow, wo du weitere Informationen finden kannst.

Falls du noch Fragen hast oder eine konkrete Anleitung f√ºr deine Umgebung brauchst, lass es mich wissen! üòä





"unit CDSDemo; interface uses Winapi.Windows, System.SysUtils, System.Classes, Vcl.Controls, Vcl.Forms, Vcl.StdCtrls, Data.DB, Datasnap.DBClient, Vcl.DBCtrls, Vcl.DBGrids, Vcl.Mask, Vcl.ExtCtrls, Vcl.Grids, MidasLib; type TMainForm = class(TForm) DBGrid1: TDBGrid; DBNavigator1: TDBNavigator; DBEdit1,DBEdit2: TDBEdit; DBCheckBox1: TDBCheckBox; DataSource1: TDataSource; ClientDataSet1: TClientDataSet; Button1,Button2,Button3: TButton; Label1,Label2,Label3: TLabel; procedure Button1Click(Sender: TObject); procedure FormCreate(Sender: TObject); procedure Button2Click(Sender: TObject); procedure Button3Click(Sender: TObject); procedure DBEdit1Exit(Sender: TObject); private { Private-Deklarationen } MainPath:String; Procedure Init_ClientDataSet; end; var MainForm: TMainForm; implementation {$R *.dfm} // TClientDataSet wird standardm√§sig als XML gespeichert (langsam) // ich empfehle das Bin√§rformat (schnell ;-) Endung CDS explizit angeben const CDSsuffix = '.CDS'; Function DataSetEmpty(aDataSet:TDataSet):Boolean; begin Result := TRUE; if not Assigned(aDataSet) then Exit; if not aDataSet.Active then Exit; Result := aDataSet.Bof and aDataSet.Eof; end; procedure TMainForm.Button2Click(Sender: TObject); begin If DataSetEmpty(ClientDataSet1) then exit; ClientDataSet1.DisableControls; ClientDataSet1.Delete; if ClientDataSet1.State in [dsEdit, dsInsert] then ClientDataSet1.Post; if ClientDataSet1.RecordCount = 0 then DeleteFile(ClientDataSet1.FileName) else begin ClientDataSet1.SaveToFile(ClientDataSet1.FileName, dfBinary); ClientDataSet1.EnableControls; end; ClientDataSet1.EnableControls; end; procedure TMainForm.Button3Click(Sender: TObject); begin If DataSetEmpty(ClientDataSet1) then exit; ClientDataSet1.Close; DeleteFile(ClientDataSet1.FileName); Init_ClientDataSet; end; procedure TMainForm.DBEdit1Exit(Sender: TObject); begin if ClientDataSet1.State in [dsEdit, dsInsert] then ClientDataSet1.Post; end; procedure TMainForm.FormCreate(Sender: TObject); begin MainPath := ExtractFilePath(Application.ExeName); Init_ClientDataSet; end; Procedure TMainForm.Init_ClientDataSet; begin ClientDataSet1.FileName := MainPath + 'ClientDataSet'+CDSsuffix; if not ClientDataSet1.Active then DeleteFile(ClientDataSet1.FileName); If FileExists(ClientDataSet1.FileName) then ClientDataSet1.Open else begin // eine Definition der Felder kann in der Entwicklungsumgebung // mit Rechtsklick auf das ClientDataSet erfolgen, // es √∂ffnet sich der ClientDataSet-Feldeditor // ich empfehle, die Felder selbst zu definieren := betriebssicherer // das geht auch zur Laufzeit with ClientDataSet1.FieldDefs do begin Clear; Add('Textfeld', ftString, 25); Add('Nummer', ftInteger); Add('Checked', ftBoolean); end; ClientDataSet1.CreateDataSet; // bei Bedarf kann schon ein Datensatz angeh√§ngt werden (*with ClientDataSet1 do begin Append; FieldByName('Textfeld').AsString := 'Hello'; FieldByName('Nummer').AsInteger := 3; FieldByName('Checked').AsBoolean := TRUE; end;... usw.*) if ClientDataSet1.State in [dsEdit, dsInsert] then ClientDataSet1.Post; // Speicherung im Bin√§rformat - Endung CDS und 'dfBinary' ClientDataSet1.SaveToFile(ClientDataSet1.FileName, dfBinary); end; DataSource1.DataSet := ClientDataSet1; end; procedure TMainForm.Button1Click(Sender: TObject); begin if DataSetEmpty(ClientDataSet1) then exit; ClientDataSet1.Append; if ClientDataSet1.State in [dsEdit, dsInsert] then ClientDataSet1.Post; end; end." Bitte in C++03 √ºbersetzen
Hier ist die √úbersetzung deines Delphi-Codes in C++03 mit dem Borland C++ Compiler (BCC32):

cpp
#include <vcl.h>
#pragma hdrstop

#include "CDSDemo.h"
#include <System.SysUtils.hpp>
#include <Data.DB.hpp>
#include <Datasnap.DBClient.hpp>

#pragma package(smart_init)
#pragma resource "*.dfm"

TMainForm *MainForm;

const String CDSsuffix = ".CDS";

bool DataSetEmpty(TDataSet *aDataSet)
{
    if (!aDataSet || !aDataSet->Active)
        return true;
    return aDataSet->Bof && aDataSet->Eof;
}

void __fastcall TMainForm::Button2Click(TObject *Sender)
{
    if (DataSetEmpty(ClientDataSet1))
        return;
    ClientDataSet1->DisableControls();
    ClientDataSet1->Delete();
    if (ClientDataSet1->State == dsEdit || ClientDataSet1->State == dsInsert)
        ClientDataSet1->Post();
    
    if (ClientDataSet1->RecordCount == 0)
        DeleteFile(ClientDataSet1->FileName);
    else
    {
        ClientDataSet1->SaveToFile(ClientDataSet1->FileName, dfBinary);
        ClientDataSet1->EnableControls();
    }
    ClientDataSet1->EnableControls();
}

void __fastcall TMainForm::Button3Click(TObject *Sender)
{
    if (DataSetEmpty(ClientDataSet1))
        return;
    ClientDataSet1->Close();
    DeleteFile(ClientDataSet1->FileName);
    Init_ClientDataSet();
}

void __fastcall TMainForm::DBEdit1Exit(TObject *Sender)
{
    if (ClientDataSet1->State == dsEdit || ClientDataSet1->State == dsInsert)
        ClientDataSet1->Post();
}

void __fastcall TMainForm::FormCreate(TObject *Sender)
{
    MainPath = ExtractFilePath(Application->ExeName);
    Init_ClientDataSet();
}

void __fastcall TMainForm::Init_ClientDataSet()
{
    ClientDataSet1->FileName = MainPath + "ClientDataSet" + CDSsuffix;
    if (!ClientDataSet1->Active)
        DeleteFile(ClientDataSet1->FileName);
    
    if (FileExists(ClientDataSet1->FileName))
        ClientDataSet1->Open();
    else
    {
        ClientDataSet1->FieldDefs->Clear();
        ClientDataSet1->FieldDefs->Add("Textfeld", ftString, 25);
        ClientDataSet1->FieldDefs->Add("Nummer", ftInteger);
        ClientDataSet1->FieldDefs->Add("Checked", ftBoolean);
        
        ClientDataSet1->CreateDataSet();
        
        if (ClientDataSet1->State == dsEdit || ClientDataSet1->State == dsInsert)
            ClientDataSet1->Post();
        
        ClientDataSet1->SaveToFile(ClientDataSet1->FileName, dfBinary);
    }
    DataSource1->DataSet = ClientDataSet1;
}

void __fastcall TMainForm::Button1Click(TObject *Sender)
{
    if (DataSetEmpty(ClientDataSet1))
        return;
    ClientDataSet1->Append();
    if (ClientDataSet1->State == dsEdit || ClientDataSet1->State == dsInsert)
        ClientDataSet1->Post();
}
Anmerkungen zur √úbersetzung
Der Code entspricht der Struktur des Original-Delphi-Codes.

TObject *Sender wird f√ºr die Ereignisprozeduren genutzt.

FieldDefs->Add ersetzt FieldDefs.Add aus Delphi.

SaveToFile(..., dfBinary) funktioniert genau wie in Delphi.

Falls du noch Anpassungen brauchst oder etwas nicht funktioniert, lass es mich wissen! üòä

Heute
"Wo ist hier die Stelle, damit "ClientDataSet1->CreateDataSet();" funktioniert. Fehlt hier nicht MidasLib ?
Ja, genau! Damit ClientDataSet1->CreateDataSet(); ordnungsgem√§√ü funktioniert, muss MidasLib eingebunden sein, da die erforderlichen Funktionen normalerweise in Midas.dll enthalten sind.

L√∂sung: MidasLib statisch einbinden
Da du Midas.dll vermeiden m√∂chtest, musst du sicherstellen, dass du MidasLib.lib in deinem Projekt verwendest. Im Fall von Borland C++ (BCC32) geht das folgenderma√üen:

MidasLib einbinden: F√ºge folgende Zeile am Anfang deiner Haupt-Unit (z. B. CDSDemo.cpp) ein:

cpp
#pragma link "MidasLib"
Dies sorgt daf√ºr, dass die Midas-Funktionen direkt in die ausf√ºhrbare Datei eingebunden werden und keine externe DLL ben√∂tigt wird.

Projektkonfiguration pr√ºfen:

Stelle sicher, dass "Use dynamic RTL" deaktiviert ist (damit die Laufzeitbibliotheken statisch verlinkt werden).

Falls du die MidasLib.lib Datei manuell hinzuf√ºgen musst, kannst du sie in den Linker-Optionen deines Projekts angeben.

√úberpr√ºfen, ob MidasLib.lib vorhanden ist:

Die Datei MidasLib.lib sollte sich in deiner C++Builder oder Delphi-Installation befinden.

Falls sie fehlt, kannst du sie aus einer entsprechenden Delphi-Version extrahieren.

Nachdem du diese Schritte befolgst, sollte ClientDataSet1->CreateDataSet(); ohne externe DLL funktionieren. Falls du noch Probleme hast, lass es mich wissen! üòä

"uses Winapi.Windows, System.SysUtils, System.Classes, Vcl.Controls, Vcl.Forms, Vcl.StdCtrls, Data.DB, Datasnap.DBClient, Vcl.DBCtrls, Vcl.DBGrids, Vcl.Mask, Vcl.ExtCtrls, Vcl.Grids, MidasLib;" Bitte pr√ºfe ob Du das in der √úbersetzung ber√ºcksichtigt hast .
Guter Punkt! Ich habe MidasLib in meiner urspr√ºnglichen √úbersetzung nicht explizit eingebunden. Damit dein C++03-Code korrekt die Midas-Funktionalit√§ten nutzen kann, musst du sicherstellen, dass du die statische Verlinkung von MidasLib einbindest.

L√∂sung f√ºr C++ mit BCC32
In deiner C++-√úbersetzung solltest du diese Zeile erg√§nzen:

cpp
#pragma link "MidasLib"
Das sorgt daf√ºr, dass die notwendigen Funktionen direkt in dein Programm eingebunden werden, sodass keine externe Midas.dll ben√∂tigt wird.

Falls du m√∂chtest, kann ich dir eine korrigierte Version des Codes schicken, die MidasLib ber√ºcksichtigt! üòä

Ja gerne
Hier ist die korrigierte Version deiner C++03-√úbersetzung mit MidasLib:

cpp
#include <vcl.h>
#pragma hdrstop

#include "CDSDemo.h"
#include <System.SysUtils.hpp>
#include <Data.DB.hpp>
#include <Datasnap.DBClient.hpp>

#pragma package(smart_init)
#pragma resource "*.dfm"
#pragma link "MidasLib"  // Statische Verlinkung mit MidasLib hinzuf√ºgen

TMainForm *MainForm;

const String CDSsuffix = ".CDS";

bool DataSetEmpty(TDataSet *aDataSet)
{
    if (!aDataSet || !aDataSet->Active)
        return true;
    return aDataSet->Bof && aDataSet->Eof;
}

void __fastcall TMainForm::Button2Click(TObject *Sender)
{
    if (DataSetEmpty(ClientDataSet1))
        return;
    ClientDataSet1->DisableControls();
    ClientDataSet1->Delete();
    if (ClientDataSet1->State == dsEdit || ClientDataSet1->State == dsInsert)
        ClientDataSet1->Post();
    
    if (ClientDataSet1->RecordCount == 0)
        DeleteFile(ClientDataSet1->FileName);
    else
    {
        ClientDataSet1->SaveToFile(ClientDataSet1->FileName, dfBinary);
        ClientDataSet1->EnableControls();
    }
    ClientDataSet1->EnableControls();
}

void __fastcall TMainForm::Button3Click(TObject *Sender)
{
    if (DataSetEmpty(ClientDataSet1))
        return;
    ClientDataSet1->Close();
    DeleteFile(ClientDataSet1->FileName);
    Init_ClientDataSet();
}

void __fastcall TMainForm::DBEdit1Exit(TObject *Sender)
{
    if (ClientDataSet1->State == dsEdit || ClientDataSet1->State == dsInsert)
        ClientDataSet1->Post();
}

void __fastcall TMainForm::FormCreate(TObject *Sender)
{
    MainPath = ExtractFilePath(Application->ExeName);
    Init_ClientDataSet();
}

void __fastcall TMainForm::Init_ClientDataSet()
{
    ClientDataSet1->FileName = MainPath + "ClientDataSet" + CDSsuffix;
    if (!ClientDataSet1->Active)
        DeleteFile(ClientDataSet1->FileName);
    
    if (FileExists(ClientDataSet1->FileName))
        ClientDataSet1->Open();
    else
    {
        ClientDataSet1->FieldDefs->Clear();
        ClientDataSet1->FieldDefs->Add("Textfeld", ftString, 25);
        ClientDataSet1->FieldDefs->Add("Nummer", ftInteger);
        ClientDataSet1->FieldDefs->Add("Checked", ftBoolean);
        
        ClientDataSet1->CreateDataSet();  // Funktioniert jetzt, da MidasLib eingebunden ist
        
        if (ClientDataSet1->State == dsEdit || ClientDataSet1->State == dsInsert)
            ClientDataSet1->Post();
        
        ClientDataSet1->SaveToFile(ClientDataSet1->FileName, dfBinary);
    }
    DataSource1->DataSet = ClientDataSet1;
}

void __fastcall TMainForm::Button1Click(TObject *Sender)
{
    if (DataSetEmpty(ClientDataSet1))
        return;
    ClientDataSet1->Append();
    if (ClientDataSet1->State == dsEdit || ClientDataSet1->State == dsInsert)
        ClientDataSet1->Post();
}
Wichtige √Ñnderungen
‚úÖ #pragma link "MidasLib" hinzugef√ºgt, um sicherzustellen, dass die Midas-Funktionen direkt in die EXE eingebunden werden. ‚úÖ Dadurch funktioniert ClientDataSet1->CreateDataSet(); ohne externe Midas.dll. ‚úÖ Sonst bleibt die Struktur deines Codes unver√§ndert.

Jetzt sollte dein C++03-Code mit BCC32 vollst√§ndig statisch funktionieren! Falls du noch weitere Fragen hast oder Tests durchf√ºhren m√∂chtest, lass es mich wissen üòä Happy Coding! üöÄ

"object ClientDataSet1: TClientDataSet Aggregates = <> Params = <> Left = 120 Top = 16 end" Ein Teil der *.dfm . Sieht sie f√ºr C++03 gleich aus ?
Ja, die DFM-Dateien (Formulardateien) sehen in C++03 mit Borland C++ (BCC32) grunds√§tzlich gleich aus wie in Delphi. Die .dfm-Datei speichert die Eigenschaften der Komponenten f√ºr die visuelle Form.

Best√§tigung f√ºr C++03
‚úÖ Die Definition von ClientDataSet1 in der .dfm bleibt identisch:

dfm
object ClientDataSet1: TClientDataSet
    Aggregates = <>
    Params = <>
    Left = 120
    Top = 16
end
‚úÖ In C++Builder wird die .dfm ebenfalls im Bin√§r- oder Textformat gespeichert und von der VCL-Forms-Architektur genutzt. ‚úÖ Der Quellcode in C++03 referenziert das ClientDataSet1-Objekt genauso wie in Delphi.

Einbindung in C++03
In deiner CDSDemo.cpp-Datei wird die .dfm automatisch eingebunden:

cpp
#pragma hdrstop
#include "CDSDemo.h"
#pragma resource "*.dfm"  // Verkn√ºpfung zur DFM-Datei
Das bedeutet, dass deine GUI-Komponenten und deren Eigenschaften genau so geladen werden, wie sie in Delphi definiert wurden.

Falls du noch Anpassungen oder eine spezielle √Ñnderung ben√∂tigst, lass es mich wissen! üòä

"Aggregates = <> Params = <>" Was bedeutete das hier ?
Diese beiden Eigenschaften geh√∂ren zum TClientDataSet in Delphi und C++Builder und haben spezifische Funktionen:

Aggregates = <> Diese Eigenschaft enth√§lt die Definitionen f√ºr Aggregationsfelder, die Berechnungen √ºber die Daten im ClientDataSet durchf√ºhren k√∂nnen (z. B. Summen, Mittelwerte). Wenn sie leer (<>) ist, bedeutet das, dass keine Aggregationen definiert sind.

Params = <> Diese Eigenschaft wird f√ºr Parameter genutzt, die beim Zugriff auf eine Datenquelle √ºber einen Provider oder eine gespeicherte Prozedur √ºbergeben werden k√∂nnen. Wenn sie leer ist (<>), gibt es keine Parameter in diesem ClientDataSet.

Da du MidasLib statisch verlinkst und dein ClientDataSet lokal verwendest, brauchst du diese Eigenschaften in der .dfm-Datei wahrscheinlich nicht aktiv zu setzen. Falls du eine Aggregation oder Parameter nutzen willst, kannst du sie im Code explizit definieren.

Hast du vor, Aggregationen oder Parameter f√ºr dein Dataset zu verwenden? üòä

Vielen dank und bis Morgen. Es ist sp√§t. Ich versuche das morgen.
Gern geschehen, Rudolf! üòä Ruh dich gut aus, und wenn du morgen weitermachst und Fragen hast, stehe ich bereit. Viel Erfolg bei deinen Tests ‚Äì bis morgen! üåü

