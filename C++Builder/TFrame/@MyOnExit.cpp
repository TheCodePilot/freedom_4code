1. Der Frame verliert den Fokus (z.â€¯B. Benutzer klickt auf ein anderes Steuerelement):
Es gibt kein direktes â€žOnExitâ€œ-Ereignis fÃ¼r TFrame selbst, aber du kannst das OnExit-Ereignis eines enthaltenen Steuerelements (z.â€¯B. eines TEdit) verwenden, oder ein eigenes â€žFokus-Verlassenâ€œ durch Zusammensetzen steuern.

2. Der Benutzer wechselt das Formular oder schlieÃŸt das Elternformular:
Wenn du darauf reagieren willst, wenn das Frame nicht mehr sichtbar ist, gibt es zwei MÃ¶glichkeiten:

Override der Methode CMVisibleChanged:

cpp
Kopieren
Bearbeiten
void __fastcall TMyFrame::CMVisibleChanged(TMessage &Message)
{
    TFrame::Dispatch(&Message);
    if (!Visible)
    {
        // Frame wurde "verlassen" oder unsichtbar
    }
}
BEGIN_MESSAGE_MAP
    MESSAGE_HANDLER(CM_VISIBLECHANGED, TMessage, CMVisibleChanged)
END_MESSAGE_MAP(TFrame)
3. Der Frame wird aus dem Sichtbereich entfernt oder deaktiviert:
Du kÃ¶nntest folgende Ereignisse oder Methoden Ã¼berladen:

OnExit: Gilt nur fÃ¼r Steuerelemente, nicht direkt fÃ¼r TFrame.

DoExit(): In einem abgeleiteten Frame kÃ¶nntest du diese Methode Ã¼berladen, sie wird aber nur aufgerufen, wenn der Frame selbst den Fokus verliert (was selten passiert, da Container meist keinen Fokus erhalten).

OnDeactivate oder OnHide: Diese existieren nicht direkt fÃ¼r TFrame, aber du kannst in einem abgeleiteten Frame auf OnVisibleChanged oder Parent->OnDeactivate reagieren (sofern verfÃ¼gbar).

Empfehlung:
Wenn du wissen willst, wann der Benutzer den Frame â€žverlÃ¤sstâ€œ, implementiere in deinem abgeleiteten TFrame eine Methode, die prÃ¼ft, wann der Fokus auf ein Steuerelement auÃŸerhalb des Frames wechselt:

Beispiel (Fokus-Wechsel erkennen):
cpp
Kopieren
Bearbeiten
void __fastcall TMyFrame::AppOnMessage(tagMSG &Msg, bool &Handled)
{
    if (Msg.message == WM_SETFOCUS)
    {
        HWND hNewFocus = (HWND)Msg.wParam;
        if (!IsChild(Handle, hNewFocus))
        {
            // Fokus liegt nun auÃŸerhalb des Frames
            OnFrameExit();  // eigene Methode aufrufen
        }
    }
}
Und das registrierst du z.â€¯B. in deinem Formular oder Frame:

cpp
Kopieren
Bearbeiten
Application->OnMessage = AppOnMessage;
Zusammenfassung:
Situation	MÃ¶gliche Reaktion
Benutzer verlÃ¤sst Steuerelement	OnExit pro Steuerelement
Frame verliert Fokus	Manuell Ã¼ber Application->OnMessage
Frame wird unsichtbar	CM_VISIBLECHANGED Ã¼ber MESSAGE_HANDLER
Frame wird entladen / zerstÃ¶rt	Destruktor ~TMyFrame()

Wenn du dein konkretes Ziel nÃ¤her beschreibst (z.â€¯B. â€žich will validieren, wenn der Nutzer von einem Frame zum nÃ¤chsten wechseltâ€œ), kann ich dir die genau passende Methode vorschlagen.

//====================================Einschub von mir====================================

Sehr gute Frage.

Nein, du musst dich in Application->OnMessage nicht standardmÃ¤ÃŸig um andere Nachrichten kÃ¼mmern, wenn du Handled = true; nicht setzt.

ErklÃ¤rung:
Der Parameter Handled gibt an, ob die Nachricht bereits vollstÃ¤ndig verarbeitet wurde. Wenn du Handled = true; setzt, wird die normale Standardverarbeitung dieser Nachricht unterdrÃ¼ckt â€“ das willst du nur dann machen, wenn du die Nachricht komplett selbst behandelst (was in deinem Fall nicht nÃ¶tig ist).

In deinem Beispiel:
cpp
Kopieren
Bearbeiten
void __fastcall TMyFrame::AppOnMessage(tagMSG &Msg, bool &Handled)
{
    if (Msg.message == WM_SETFOCUS)
    {
        HWND hNewFocus = (HWND)Msg.wParam;
        if (!IsChild(Handle, hNewFocus))
        {
            OnFrameExit();  // eigene Methode
        }
        // Nachricht wurde nur beobachtet, nicht verbraucht:
        // Daher: Handled = false; oder einfach nichts tun
    }
}
Solange du Handled nicht auf true setzt, wird die Nachricht ganz normal weiterverarbeitet, und du musst dich nicht um andere Nachrichten kÃ¼mmern oder sie weiterleiten.

Wann wÃ¤re Handled = true; nÃ¶tig?
Nur wenn du z.â€¯B. die Standardverarbeitung verhindern willst, wie bei TastendrÃ¼cken (z.â€¯B. VK_RETURN unterdrÃ¼cken) oder das Weiterreichen an andere Controls.

Fazit:
In deinem Beispiel:

Nein, du musst keine anderen Nachrichten behandeln.

Ja, du kannst dich auf WM_SETFOCUS beschrÃ¤nken.

Lass Handled einfach auf false, und alles andere wird wie gewohnt verarbeitet.







Du:
"Application->OnMessage = AppOnMessage; " Was genau geschieht hier ?


ChatGPT:
Die Zeile:

cpp
Kopieren
Bearbeiten
Application->OnMessage = AppOnMessage;
weist der globalen Ereignisbehandlung von Nachrichten auf Anwendungsebene eine eigene Callback-Funktion zu.

Was genau passiert:
Application ist ein globales Objekt vom Typ TApplication, das fÃ¼r das gesamte VCL-Programm zentral ist â€“ es verarbeitet z.â€¯B. Nachrichten, zeigt Exceptions an usw.

OnMessage ist ein Ereignis (Event-Handler) des Typs:

cpp
Kopieren
Bearbeiten
TMessageEvent = void __fastcall (__closure *TMessageEvent)(tagMSG &Msg, bool &Handled);
Das heiÃŸt: Es erwartet eine Funktion, die jede Windows-Nachricht abfangen kann, bevor sie an das eigentliche Ziel (z.â€¯B. ein Steuerelement) weitergegeben wird.

AppOnMessage ist eine Methode (z.â€¯B. in deinem Formular oder Frame), die diesem Signaturtyp entspricht. Sobald eine Windows-Nachricht verarbeitet wird, ruft die VCL deine Methode auf.

Beispielhafte Wirkung:
Wenn du dies in deinem Formular machst:

cpp
Kopieren
Bearbeiten
Application->OnMessage = AppOnMessage;
Dann bekommst du in AppOnMessage jede einzelne Windows-Nachricht, bevor sie intern an die Zielkomponente gesendet wird â€“ z.â€¯B.:

Tastatureingaben (z.â€¯B. WM_KEYDOWN)

Mausklicks (WM_LBUTTONDOWN)

Fokuswechsel (WM_SETFOCUS, WM_KILLFOCUS)

u.v.m.

Wichtiger Hinweis:
Die Ereignisbehandlung durch OnMessage ist global fÃ¼r die ganze Anwendung. Das bedeutet:

Es gibt immer nur eine OnMessage-Methode gleichzeitig.

Wenn du Application->OnMessage = ... mehrmals setzt, Ã¼berschreibst du frÃ¼here Zuweisungen.

Du solltest vorherigen Handler sichern, wenn du spÃ¤ter zurÃ¼cksetzen willst:

cpp
Kopieren
Bearbeiten
TMessageEvent OldHandler = Application->OnMessage;
Application->OnMessage = MyHandler;
...
Application->OnMessage = OldHandler;  // zurÃ¼cksetzen
Zusammenfassung:
Teil	Bedeutung
Application	Globale Anwendungskomponente
OnMessage	Ereignis fÃ¼r globale Nachrichtenverarbeitung
AppOnMessage	Eigene Methode, die Nachrichten verarbeitet
Zweck	Nachrichten beobachten oder eingreifen, z.â€¯B. Fokus, Tasten etc.

Wenn du z.â€¯B. global bestimmte Tastenkombinationen abfangen oder FokusÃ¤nderungen zwischen Steuerelementen kontrollieren willst, ist Application->OnMessage genau der richtige Ort dafÃ¼r.

//====================================Ende Einschub von mir====================================

Genaue LÃ¶sung:

Danke, jetzt ist dein Ziel ganz klar:
Sobald der Benutzer ein Steuerelement auÃŸerhalb deines TFrame (also z.â€¯B. auf dem TForm) fokussiert, willst du MySave() aufrufen.

Das heiÃŸt: Du brauchst eine Methode, die erkennt, wenn der Fokus den Frame verlÃ¤sst.

ðŸ§© LÃ¶sung (C++03 / VCL):
Wir verwenden Application->OnMessage, um WM_SETFOCUS-Nachrichten global abzufangen und zu prÃ¼fen, ob der neue Fokus auÃŸerhalb des Frames liegt.

âœ… Schritt-fÃ¼r-Schritt:
1. Eigene Methode zur PrÃ¼fung:
cpp
Kopieren
Bearbeiten
void __fastcall TMyFrame::AppOnMessage(tagMSG &Msg, bool &Handled)
{
    if (Msg.message == WM_SETFOCUS)
    {
        HWND hNewFocus = (HWND)Msg.wParam;

        // PrÃ¼fen: Ist der neue Fokus auÃŸerhalb dieses Frames?
        if (!::IsChild(Handle, hNewFocus))
        {
            // Fokus hat Frame verlassen
            MySave();  // Zwischenspeichern aufrufen
        }
    }
}
2. Ereignis registrieren:
Am besten z.â€¯B. im OnCreate des Elternformulars oder beim Initialisieren des Frames:

cpp
Kopieren
Bearbeiten
Application->OnMessage = AppOnMessage;
ðŸ’¡ Optional: Vorherigen Handler sichern und spÃ¤ter wiederherstellen (wenn du aufrÃ¤umen willst):

cpp
Kopieren
Bearbeiten
static TMessageEvent OldAppMessageHandler;

void __fastcall TForm1::FormCreate(TObject *Sender)
{
    OldAppMessageHandler = Application->OnMessage;
    Application->OnMessage = AppOnMessage;
}

void __fastcall TForm1::FormDestroy(TObject *Sender)
{
    Application->OnMessage = OldAppMessageHandler;
}
ðŸ”’ Wichtige Hinweise:
Falls du mehrere Frames oder Komponenten hast, die Ã¤hnliches Verhalten brauchen, solltest du prÃ¼fen, welcher Frame gerade aktiv ist, und eventuell eine zentrale Verwaltung machen.

Wenn MySave() nicht mehrfach aufgerufen werden soll, speichere einen Zustand z.â€¯B. mit einem bool isSaved.

ðŸ§ª Extra: Alternative Ã¼ber WM_KILLFOCUS
Du kÃ¶nntest auch Ã¼ber den Frame direkt WM_KILLFOCUS behandeln, aber nur, wenn dein Frame selbst fokussiert ist â€“ was in der Praxis bei Containern selten der Fall ist. Die OnMessage-Variante ist zuverlÃ¤ssiger.

âœ… Fazit:
FÃ¼r dein Ziel â€“ beim Verlassen des Frames durch Fokuswechsel auf ein Steuerelement des Formulars automatisch MySave() aufzurufen â€“ ist Application->OnMessage mit WM_SETFOCUS die richtige, saubere LÃ¶sung in C++03/VCL.

