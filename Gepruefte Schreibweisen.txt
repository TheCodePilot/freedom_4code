

#import <msxml6.dll>

int main()
{
    // Initialisieren Sie die COM-Bibliothek
    CoInitialize(NULL);

    // Erstellen Sie ein DOM-Dokument
    MSXML2::IXMLDOMDocumentPtr pDoc("Msxml2.DOMDocument.6.0");

    // Laden Sie das XML-Dokument
    pDoc->async = VARIANT_FALSE;
    pDoc->loadXML("<root><child1/><child2/></root>");

    // Holen Sie sich den Root-Knoten
    MSXML2::IXMLDOMElementPtr pRoot = pDoc->documentElement;

    // Holen Sie sich den ersten Kindknoten des Root-Knotens
    MSXML2::IXMLDOMNodePtr pFirstChild = pRoot->firstChild;

    // Beenden Sie die COM-Bibliothek
    CoUninitialize();

    return 0;
}

#import <msxml6.dll>

int main()
{
    // Initialisieren Sie die COM-Bibliothek
    CoInitialize(NULL);

    // Erstellen Sie ein DOM-Dokument
    MSXML2::IXMLDOMDocumentPtr pDoc("Msxml2.DOMDocument.6.0");

    // Laden Sie das XML-Dokument
    pDoc->async = VARIANT_FALSE;
    pDoc->loadXML("<Unternehmen>...</Unternehmen>"); // Ersetzen Sie <Unternehmen>...</Unternehmen> durch Ihren XML-String

    // Holen Sie sich den Root-Knoten
    MSXML2::IXMLDOMElementPtr pRoot = pDoc->documentElement;

    // Holen Sie sich alle Email-Knoten
    MSXML2::IXMLDOMNodeListPtr pEmailNodes = pRoot→getElementsByTagName("Email");

 // Durchlaufen Sie alle Email-Knoten und drucken Sie den Text aus
    MSXML2::IXMLDOMNodePtr pEmailNode;
    while ((pEmailNode = pEmailNodes->nextNode()) != NULL)
    {
        _bstr_t text = pEmailNode->text;
        printf("Email: %s\n", (const char*)text);
    }

    // Beenden Sie die COM-Bibliothek
    CoUninitialize();

    return 0;
}

#import <msxml6.dll>

int main()
{
    // Initialisieren Sie die COM-Bibliothek
    CoInitialize(NULL);

    // Erstellen Sie ein DOM-Dokument
    MSXML2::IXMLDOMDocumentPtr pDoc("Msxml2.DOMDocument.6.0");

    // Laden Sie das XML-Dokument
    pDoc->async = VARIANT_FALSE;
    pDoc->loadXML("<Unternehmen>...</Unternehmen>"); // Ersetzen Sie <Unternehmen>...</Unternehmen> durch Ihren XML-String

    // Holen Sie sich den Root-Knoten
    MSXML2::IXMLDOMElementPtr pRoot = pDoc→documentElement;

// Holen Sie sich alle Email-Knoten
    MSXML2::IXMLDOMNodeList *pEmailNodes = pRoot->getElementsByTagName("Email");

    // Durchlaufen Sie alle Email-Knoten und drucken Sie den Text aus
    MSXML2::IXMLDOMNode *pEmailNode;
    while ((pEmailNode = pEmailNodes->nextNode()) != NULL)
    {
        _bstr_t text = pEmailNode->text;
        printf("Email: %s\n", (const char*)text);
    }

    // Beenden Sie die COM-Bibliothek
    CoUninitialize();

    return 0;
}

#import <msxml6.dll>


//Dies ist eine typische Kombination


int main()
{
    // Initialisieren Sie die COM-Bibliothek
    CoInitialize(NULL);

    // Erstellen Sie ein DOM-Dokument
    MSXML2::IXMLDOMDocumentPtr pDoc("Msxml2.DOMDocument.6.0");

    // Laden Sie das XML-Dokument
    pDoc->async = VARIANT_FALSE;
    pDoc->loadXML("<Unternehmen>...</Unternehmen>"); // Ersetzen Sie <Unternehmen>...</Unternehmen> durch Ihren XML-String

    // Holen Sie sich den Root-Knoten
    MSXML2::IXMLDOMElementPtr pRoot = pDoc->documentElement;

    // Holen Sie sich alle Abteilung-Knoten
    MSXML2::IXMLDOMNodeList *pDeptNodes = pRoot->getElementsByTagName("Abteilung");

    MSXML2::IXMLDOMNode *pDeptNode;
    while ((pDeptNode = pDeptNodes->nextNode()) != NULL)
    {
        // Überprüfen Sie, ob das Attribut name "Entwicklung" ist
        _bstr_t name = pDeptNode->attributes->getNamedItem("name")->text;
        if (name == "Entwicklung")
        {
            // Holen Sie sich alle Email-Knoten in dieser Abteilung
            MSXML2::IXMLDOMNodeList *pEmailNodes = pDeptNode->getElementsByTagName("Email");

            // Durchlaufen Sie alle Email-Knoten und drucken Sie den Text aus
            MSXML2::IXMLDOMNode *pEmailNode;
            while ((pEmailNode = pEmailNodes->nextNode()) != NULL)
            {
                _bstr_t text = pEmailNode->text;
                printf("Email: %s\n", (const char*)text);
            }
        }
    }

    // Beenden Sie die COM-Bibliothek
    CoUninitialize();

    return 0;
}

_____________________________________

#import <msxml6.dll>
using namespace MSXML2;

int main()
{
    // Initialisieren Sie die COM-Bibliothek
    CoInitialize(NULL);

    // Erstellen Sie ein DOM-Dokument
    IXMLDOMDocumentPtr pDoc("Msxml2.DOMDocument.6.0");

    // Laden Sie das XML-Dokument
    pDoc->async = VARIANT_FALSE;
    pDoc->loadXML("<Unternehmen>...</Unternehmen>"); // Ersetzen Sie <Unternehmen>...</Unternehmen> durch Ihren XML-String

    // Holen Sie sich den Root-Knoten
    IXMLDOMElementPtr pRoot = pDoc->documentElement;

    // Beenden Sie die COM-Bibliothek
    CoUninitialize();

    return 0;
}

__########################################__

#include <iostream>
#include <windows.h>
#import "msxml6.dll" named_guids

using namespace MSXML2;

int main() {
    HRESULT hr;

    // Initialisierung von COM
    hr = CoInitialize(NULL);
    if (FAILED(hr)) {
        std::cerr << "COM-Initialisierung fehlgeschlagen." << std::endl;
        return 1;
    }

    // Erstellen eines DOM-Dokuments
    IXMLDOMDocumentPtr pXMLDoc;
    hr = pXMLDoc.CreateInstance(__uuidof(DOMDocument60));
    if (FAILED(hr)) {
        std::cerr << "Fehler beim Erstellen des DOM-Dokuments." << std::endl;
        CoUninitialize();
        return 1;
    }

    // XML-Datenstring als wchar_t* definieren
    const wchar_t* xmlData = L"<root><example id=\"1\">Sample XML Data</example></root>";

    // Konvertierung des wchar_t*-Datenstrings in einen BSTR
    BSTR bstrXMLData = SysAllocString(xmlData);
    if (!bstrXMLData) {
        std::cerr << "Fehler beim Erstellen des BSTR." << std::endl;
        pXMLDoc.Release();
        CoUninitialize();
        return 1;
    }

    // Laden von XML-Daten aus einem BSTR in das DOM-Dokument
    VARIANT_BOOL bSuccess;
    hr = pXMLDoc->loadXML(bstrXMLData, &bSuccess);
    if (FAILED(hr) || bSuccess == VARIANT_FALSE) {
        std::cerr << "Fehler beim Laden der XML-Daten." << std::endl;
        SysFreeString(bstrXMLData); // Freigabe des BSTR
        pXMLDoc.Release();
        CoUninitialize();
        return 1;
    }

    // XML erfolgreich geladen, nun können Operationen auf dem DOM-Dokument ausgeführt werden

    // Freigabe des BSTR, da er nicht mehr benötigt wird
    SysFreeString(bstrXMLData);

    // Root-Knoten des DOM-Dokuments abrufen
    IXMLDOMNodePtr pRoot;
    hr = pXMLDoc->get_documentElement(&pRoot);
    if (FAILED(hr)) {
        std::cerr << "Fehler beim Abrufen des Root-Knotens." << std::endl;
        pXMLDoc.Release();
        CoUninitialize();
        return 1;
    }

    // NodeList mit den Elementen, die das Tag 'example' haben, abrufen
    IXMLDOMNodeListPtr pDeptNodes;
    hr = pRoot->getElementsByTagName(L"example", &pDeptNodes);
    if (FAILED(hr)) {
        std::cerr << "Fehler beim Abrufen der Elemente mit dem Tag 'example'." << std::endl;
        pRoot.Release();
        pXMLDoc.Release();
        CoUninitialize();
        return 1;
    }

    // Das erste Element in der NodeList abrufen
    IXMLDOMNodePtr pDeptNode;
    hr = pDeptNodes->nextNode(&pDeptNode);
    if (FAILED(hr)) {
        std::cerr << "Fehler beim Abrufen des ersten Elements mit dem Tag 'example'." << std::endl;
        pRoot.Release();
        pDeptNodes.Release();
        pXMLDoc.Release();
        CoUninitialize();
        return 1;
    }

    // Attribute des Elements abrufen
    IXMLDOMNamedNodeMapPtr pAttributes;
    hr = pDeptNode->get_attributes(&pAttributes);
    if (FAILED(hr)) {
        std::cerr << "Fehler beim Abrufen der Attribute des Elements." << std::endl;
        pRoot.Release();
        pDeptNodes.Release();
        pXMLDoc.Release();
        CoUninitialize();
        return 1;
    }

    // Durchlaufen und Verarbeiten der Attribute
    long attributeCount = 0;
    hr = pAttributes->get_length(&attributeCount);
    if (FAILED(hr)) {
        std::cerr << "Fehler beim Abrufen der Anzahl der Attribute." << std::endl;
        pRoot.Release();
        pDeptNodes.Release();
        pXMLDoc.Release();
        CoUninitialize();
        return 1;
    }

    std::cout << "Anzahl der Attribute: " << attributeCount << std::endl;

    for (long i = 0; i < attributeCount; ++i) {
        IXMLDOMNodePtr pAttribute;
        hr = pAttributes->get_item(i, &pAttribute);
        if (FAILED(hr)) {
            std::cerr << "Fehler beim Abrufen des Attributes." << std::endl;
            continue;
        }

        BSTR bstrAttributeName;
        hr = pAttribute->get_nodeName(&bstrAttributeName);
        if (SUCCEEDED(hr)) {
            std::wcout << "Attributname: " << bstrAttributeName << std::endl;
            SysFreeString(bstrAttributeName);
        }

        BSTR bstrAttributeValue;
        hr = pAttribute->get_text(&bstrAttributeValue);
        if (SUCCEEDED(hr)) {
            std::wcout << "Attributwert: " << bstrAttributeValue << std::endl;
            SysFreeString(bstrAttributeValue);
        }

        pAttribute.Release(); // Freigabe des aktuellen Attributes
    }

    // Freigabe der COM-Objekte
    pRoot.Release();
    pDeptNodes.Release();
    pXMLDoc.Release();
    CoUninitialize();
    return 0;
}

//Loesung der String-Probleme
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// Durchlaufen und Verarbeiten der NodeList
    IXMLDOMNodePtr pDeptNode;
    while ((pDeptNode = pDeptNodes->nextNode()) != NULL) {
        // Überprüfen Sie, ob das Attribut name "Entwicklung" ist
        IXMLDOMNamedNodeMapPtr pAttributes;
        hr = pDeptNode->get_attributes(&pAttributes);
        if (FAILED(hr)) {
            std::cerr << "Fehler beim Abrufen der Attribute des Elements." << std::endl;
            continue;
        }

        IXMLDOMNodePtr pNameAttribute;
        hr = pAttributes->getNamedItem(L"name", &pNameAttribute);
        if (FAILED(hr)) {
            std::cerr << "Fehler beim Abrufen des Attributs 'name'." << std::endl;
            continue;
        }

        BSTR bstrName;
        hr = pNameAttribute->get_text(&bstrName);
        if (FAILED(hr)) {
            std::cerr << "Fehler beim Abrufen des Attributwerts 'name'." << std::endl;
            continue;
        }

        // Konvertieren von BSTR zu const wchar_t*
        const wchar_t* name = bstrName;

        if (wcscmp(name, L"Entwicklung") == 0) {
            // Holen Sie sich alle Email-Knoten in dieser Abteilung
            IXMLDOMNodeListPtr pEmailNodes;
            hr = pDeptNode->getElementsByTagName(L"Email", &pEmailNodes);
            if (FAILED(hr)) {
                std::cerr << "Fehler beim Abrufen der Email-Knoten." << std::endl;
                continue;
            }

            // Durchlaufen Sie alle Email-Knoten und drucken Sie den Text aus
            IXMLDOMNodePtr pEmailNode;
            while ((pEmailNode = pEmailNodes->nextNode()) != NULL) {
                BSTR bstrEmailText;
                hr = pEmailNode->get_text(&bstrEmailText);
                if (FAILED(hr)) {
                    std::cerr << "Fehler beim Abrufen des Texts des Email-Knotens." << std::endl;
                    continue;
                }

                // Konvertieren von BSTR zu const wchar_t*
                const wchar_t* emailText = bstrEmailText;

                std::wcout << "Email: " << emailText << std::endl;

                // Freigabe des BSTR
                SysFreeString(bstrEmailText);
            }
        }

        // Freigabe des BSTR
        SysFreeString(bstrName);
    }

    // Freigabe der COM-Objekte
    pRoot.Release();
    pDeptNodes.Release();
    pXMLDoc.Release();
    CoUninitialize();
    return 0;
}

