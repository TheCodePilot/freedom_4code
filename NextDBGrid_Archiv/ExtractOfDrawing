Bei der ersten Ini pro wechsel Card_Item record auf zack setzen...
Menge +1 zum Beipiel
!!!geht nur wenn so bleibt die anderen da sind


//Problem String in float-Darstellung



//Wo am besten Schreiberlaubnis



//Kontrolle ob sinnvolle Werte




//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Frame01.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma link "NxCustomGrid"
#pragma link "NxCustomGridControl"
#pragma link "NxDBGrid"
#pragma link "NxScrollControl"
#pragma link "NxGrid"
#pragma link "NxColumns"
#pragma link "NxDBColumns"
#pragma link "DBAccess"
#pragma link "MemDS"
#pragma link "MSAccess"
#pragma resource "*.dfm"
TFrame4XML *Frame4XML;
//---------------------------------------------------------------------------




__fastcall TFrame4XML::TFrame4XML(TComponent* Owner)
	: TFrame(Owner)//, Form4XML(new TFormXML(this))
{
	BereitZumSQL_Quest();
	Row = -1; Col = -1; Col4Red = -1;
}

//Bitte im großen Projekt prüfen
__fastcall TFrame4XML::~TFrame4XML()
{
	//ShowMessage("Destruktor : TFrame4XML::~TFrame4XML()");

	if(QC1)
		delete QC1;
	QC1=NULL;
}
//---------------------------------------------------------------------------
void __fastcall TFrame4XML::cbnXMLOnClick(TObject *Sender)
{
	//ShowMyForm();
	CreateAndShowForm();
}
//---------------------------------------------------------------------------

void __fastcall TFrame4XML::CreateAndShowForm()
{
	//TFormXML::instanceCount = 0;

	// Eine Instanz von TFormXML erhalten
	//TFormXML* form
	TFormXML* Form4XML = NULL;
	Application->CreateForm(__classid(TFormXML), &Form4XML);
	//Form4XML = TFormXML::getInstance(this); // Annahme: this ist ein Frame
	// Das Formular anzeigen
	Form4XML->MyFrame = this;    //Im großen Projekt global sein

//NgDB1->DataSource = Form4XML->DataSource5;
	Form4XML->ShowModal();

}

//----------------------------------------------------------------------------
//Teil zum testen in die Datenbank zu schreiben der Wechsel
void __fastcall TFrame4XML::IniDB()
{
	//MSCon = new TMSConnection(NULL);    nicht nötig von C++ Builder verwaltet
	try
	{
		MSCon->Server = "detoic008A";
		MSCon->Authentication = auWindows; //auServer;
		//MSCon->Username = ""; //nicht nötig da auWindows
		//MSCon->Password = ""; //nicht nötig da auWindows
		MSCon->Database = "Nordwind";
		MSCon->LoginPrompt = !False;
		MSCon->Connect();
	}
	catch (const Exception &e)
	{
		ShowMessage("Fehler Beim Aufbau der Datenbank: " + e.Message);
	}
}

//QSTab->SQL->Add("SELECT * FROM [Nordwind].[dbo].[rrNordwind]");

void __fastcall TFrame4XML::BereitZumSQL_Quest()
{
	QC1 = NULL;
	QC1 = new TMSQuery(NULL);
	//QSTab=NULL;
	//QSTab = new TMSQuery(NULL);

	IniDB();
	QC1->Connection = MSCon;
	DS->DataSet = QC1;
	//QSTab->Connection = MSCon;
	//DSRC->DataSet = QSTab;
	//Bemerkung das TNextDB ist schon im Designer mit DS verbunden

	//SendSQLLine("SELECT * FROM [Nordwind].[dbo].[rrNordwind]",QC1,1);
}


void __fastcall TFrame4XML::cbnSQL_Query(TObject *Sender)
{
	QC1->Connection = MSCon;
	DS->DataSet = QC1;
	NgDB1->DataSource = DS;
	SendSQLLine("SELECT * FROM [Nordwind].[dbo].[rrNordwind]",QC1,1);
}
//---------------------------------------------------------------------------

int _fastcall TFrame4XML::SendSQLLine(AnsiString Line, TMSQuery *SQ, int showmessage) // Nur gültig für Haupt-DB (MDE)
{
   /*	if(DBM.Connected==false)
	{
		if(showmessage)
				if(showmessage) ShowMessage("Keine Verbindung " + AnsiString(e.what()));
		return 1;
	}

	if(Form00_SU->Visible && Form00_SU->CBallowMonitorSQL->Checked) Form00_SU->MMdb->Lines->Add("     SQL: "+Line);

	if(SQ->Connection!=DBM.Connection) SQ->Connection=DBM.Connection;
	*/
	SQ->Connection = MSCon;

	SQ->Close();
	SQ->SQL->Clear();
	SQ->SQL->Add(Line);

	try
	{
	  SQ->ExecSQL();

	  if(Line.Pos("SELECT ")==1)
	  {
		 if   (SQ->Eof)
		 {
			if(showmessage) ShowMessage("SQLException Ende der Tabelle erreicht: "); // + AnsiString(e.what()));
				return 2;
		 }
		 else {SQ->First(); return 0;}
	  }
	  else                  return 0;
	}
	catch (...)
	{

		if(showmessage) ShowMessage("Allgemeines Problem mit SQL: "); // + AnsiString(e.what()));
		return 1;
	}
}

/*
TClientDataSet *CDS_Test;
	TMSDataSource *DS;
	TMSQuery *QC1;

	if(QC1==NULL)  {QC1=new TMSQuery(NULL);  DS->DataSet=QC1;}
	*/

//---------------------------------------------------------------------------

void __fastcall TFrame4XML::NgDBOnDrawHeader(TObject *Sender, int Index, TRect &HeaderRect)

{
	TColumnHeader* header;
	for (int i = 0; i < NgDB->Columns->Count; ++i) {
		header = NgDB->Columns->Item[i]->Header;
		header->Color = clBlue;
		header->Font->Style << fsBold;
		header->Caption = "Nix";

	//NgDB->Columns->Item[Index]->Font->Style = TFontStyles() << fsBold;	//Field->SetFieldProps() Font->Style = TFontStyles() << fsBold;// Title->Font->Style = TFontStyles() << fsBold;
	}



//NgDB->Canvas->Font->Style = TFontStyles() << fsBold;	//Field->SetFieldProps() Font->Style = TFontStyles() << fsBold;// Title->Font->Style = TFontStyles() << fsBold;

			   // ->Item[i]->Font->Style = TFontStyles() << fsBold;
	//}
	;
}
//---------------------------------------------------------------------------

//Zur Zeit nichts gezeichnet
void __fastcall TFrame4XML::NgDBOnCellClick(TObject *Sender, int ACol, int ARow)
{
	//TField* field = NULL;
	AnsiString ansi = "Ix";
	int row = NgDB->SelectedRow; //SelectedRow () >GetColumnByFieldName(); GetColumnByFieldName; //) >Columns[ACol]->Field;
	int Spalte = -1;
	//AnsiString ansi = NgDB->Columns->Item[row]->FieldName; //Font->Style = TFontStyles() << fsBold;
	for (int i = 0; i < NgDB->Columns->Count ; ++i)
	{
		++Spalte;
		TColumnHeader* header = NgDB->Columns->Item[i]->Header;
		AnsiString wstr = header->Caption;
		if(wstr == L"Ix"){
				//NgDB->SetCellValue(i, ARow, "IX Neuer Wert");  // Wäre hier 1 nun gelöscht
			Col = Spalte; Row = ARow; Col4Red = Spalte;
			break;
		}

	 }


	QC1->Connection = MSCon;
	DS->DataSet = QC1;
	NgDB1->DataSource = DS;

	String cellValue = NgDB->GetCellValue(Spalte,ARow);

	String sql = "UPDATE [Nordwind].[dbo].[rrNordwind] SET Land = '" + cellValue + "' WHERE ID = 5";
	SendSQLLine(sql,QC1,1);

	//AnsiString wstr = header->Caption;
	NgDB->Repaint();
}
//---------------------------------------------------------------------------

//(4) Kein Konflikt mit Coloring
void __fastcall TFrame4XML::NgDBOnCellFormating(TObject *Sender, int ACol, int ARow,
		  WideString Value, TColor &TextColor, TFontStyles &FontStyle, TCellState CellState)

{
	if (ARow >= 0) { // (5)Im Objekt-Explorer alles bold machen daan bleibt header bolt übrig
		FontStyle = TFontStyles();
	}

	if( (Value == L"500 V")||(Value == L"500  V") ) //(1)
	{
		//!!! Wichtig nicht Color nehmen sonst Frame gefärbt.
		TextColor = clRed;
		FontStyle << fsBold;
	}
	else
	{
		TextColor = clGreen;
		Font->Style >> fsBold;
	}

}
//---------------------------------------------------------------------------

void __fastcall TFrame4XML::NgDBOnDrawCellBackGround(TObject *Sender, int ACol, int ARow,
		  TRect &CellRect, TCellState CellState, bool &DefaultDrawing)
{
return;
	if (ARow == 1)// && (ACol == 3))
	{
		//Color = clYellow; //so der Frame
			//NgDB->Color = clYellow; // so Rest des Grid
				//if(CellState.Contains(csSelected)) //== csSelected)
					//NgDB->Columns->Item[ACol]->Color = clYellow;    //So Spalte eins aber es flickert

			//NgDB->Canvas->Brush->Color = clRed;
		//NgDB->Canvas->FillRect(CellRect);
	}
}
//---------------------------------------------------------------------------

void __fastcall TFrame4XML::NgDBOnCustomDraw(TObject *Sender, int ACol, int ARow,
		  TRect &CellRect, TCellState CellState)
{
return;
	if (ARow == 1)//  && (ACol == 3))
	{
		//Color = clSkyBlue;
		NgDB->Columns->Item[ACol]->Color = clSkyBlue; //clYellow;
			//NgDB->Canvas->Brush->Color = clRed;
		//NgDB->Canvas->FillRect(CellRect);
	}
}
//---------------------------------------------------------------------------

//(2)
void __fastcall TFrame4XML::NgDBOnselectCell(TObject *Sender, int ACol, int ARow)

{
return; //(2)
	if (ARow == NgDB->SelectedRow)  //Problem nur eine Zelle zun zeichnen
		NgDB->Columns->Item[ACol]->Color = clYellow;
	//NgDB->Columns->
   //;
}
//---------------------------------------------------------------------------

//(3)So eine ganze Zeile
void __fastcall TFrame4XML::NgDBOnCellColoring(TObject *Sender, int ACol, int ARow,
		  TColor &CellColor, TColor &GridColor, TCellState CellState)
{
//if ((ARow == 1) && (ACol == 3))
	{ // Überprüfe, ob es sich um die erste Zeile (Überschriftenzeile) handelt

		if(ARow == NgDB->SelectedRow)
			CellColor = clSkyBlue;
		//;
		//FontStyle = TFontStyles();
		//TextColor = clSkyBlue;
	}

}






//Für rechte aber wir testen nur mit dem linken

void __fastcall TFrame4XML::NgDB1CellBackGround(TObject *Sender, int ACol, int ARow,
          TRect &CellRect, TCellState CellState, bool &DefaultDrawing)
{
    ;
}
//---------------------------------------------------------------------------

void __fastcall TFrame4XML::NgDB1OnCellFormating(TObject *Sender, int ACol, int ARow,
          WideString Value, TColor &TextColor, TFontStyles &FontStyle, TCellState CellState)

{

	if ((Col > -1) && (Row > -1) && (ARow == Row) && (ACol == Col)) { // Überprüfe, ob es sich um die erste Zeile (Überschriftenzeile) handelt
		//FontStyle = TFontStyles();
		;
		//TextColor = clSkyBlue;
	}
	//if(ARow == -1)
	//	FontStyle << fsBold;
	//if(CellState.Contains(cpsTitle)
	//	FontStyle << fsBold;
}
//---------------------------------------------------------------------------




/*
Bemerkung (1)
	Ginge auch
	TField* Field;
	Field = NgDB->Columns->Item[ACol]->Field;
	WideString ansi = Field->AsWideString;
	if( (ansi == L"500 V")||(ansi == L"500  V") )

Bemerkung (2)
So ganze Spalte vom Select-Bereich
	void __fastcall TFrame4XML::NgDBOnselectCell(TObject *Sender, int ACol, int ARow)

{
//return;
	if (ARow == NgDB->SelectedRow)  //Problem nur eine Zelle zun zeichnen
		NgDB->Columns->Item[ACol]->Color = clYellow;
	//NgDB->Columns->
   //;
}

Bemerkung(5)
Im Objekt-Explorer alles bold machen daan bleibt header bolt übrig

*/
//---------------
TField* Field;
Field = NextDBGrid1->Columns->Items[ACol]->Field;
if (Field->AsInteger == 4)
    CellColor = clRed;

____

NextGrid1.RefreshRow(NextGrid1.SelectedRow);
die Zeile muss neu gezeichnet werden, da das OnFormatText-Ereignis kein Ereignis auslöst. 

___

Field := NextDBGrid.Columns[NextDBGrid1.SelectedColumn].Field;

___

How edit data of nextdbgrid cells by click on it ? 
Set coEditing flag in Options property of column to True or double click on next icon:
But please note that DataSet must be not Read-only.

___

void __fastcall TForm1::NextDBGrid1CellClick(TColumn *Column)
{
    // Aktualisieren Sie die Zeile, die die angeklickte Zelle enthält
    NextDBGrid1->RefreshRow(NextDBGrid1->SelectedRow);
}

___

void __fastcall TForm1::FormResize(TObject *Sender)
{
    int totalWidth = 0;

    // Summieren Sie die Breiten aller Spalten außer der letzten
    for (int i = 0; i < NextDBGrid1->Columns->Count - 1; i++)
        totalWidth += NextDBGrid1->Columns->Items[i]->Width;

    // Setzen Sie die Breite der letzten Spalte so, dass sie den verfügbaren Platz ausfüllt
    TColumn* lastColumn = NextDBGrid1->Columns->Items[NextDBGrid1->Columns->Count - 1];
    lastColumn->Width = NextDBGrid1->ClientRect.Width - totalWidth;
}

//------------------------

void __fastcall TForm1::NxDBGRecapCellFormating(TObject *Sender, int ACol, int ARow, WideString &Value, TColor &TextColor, TFontStyles &FontStyle, TCellState CellState)
{
    if (CellState.Contains(csSelected))
        FontStyle << fsBold;
}

void __fastcall TForm1::NxDBGRecapCellColoring(TObject *Sender, int ACol, int ARow, TColor &CellColor, TColor &GridColor, TCellState CellState)
{
    if (CellState.Contains(csEmpty))
        return;

    if (NxDBGRecap->CellValue[13][ARow] != Unassigned) //Rendu
        CellColor = (TColor)0x238E23;
    else
    {
        if (NxDBGRecap->CellValue[10][ARow] != Unassigned)
            if (StrToDate(NxDBGRecap->CellValue[10][ARow]) < Date()) //En retard
                CellColor = (TColor)0xD98719;

        if (NxDBGRecap->CellValue[12][ARow] != Unassigned)  //Interupt
            if (CellColor == (TColor)0xD98719)
                CellColor = clRed;
            else
                CellColor = (TColor)0xA62A2A;
    }

    // Erzwingen Sie eine Neuzuzeichnung des Grids
    NxDBGRecap->Invalidate();
}

Gute Frage! Die Invalidate-Methode markiert das gesamte Steuerelement als “ungültig” und veranlasst Windows, ein WM_PAINT-Ereignis zu senden, um das Steuerelement neu zu zeichnen. Wenn Sie Invalidate innerhalb einer Ereignisbehandlungsroutine wie OnDrawColumnCell aufrufen, die selbst durch das WM_PAINT-Ereignis ausgelöst wird, könnten Sie tatsächlich eine Endlosschleife erzeugen.
Eine bessere Lösung könnte sein, die Invalidate-Methode außerhalb der OnDrawColumnCell-Ereignisbehandlungsroutine aufzurufen. Zum Beispiel könnten Sie eine separate Methode erstellen, die die Zellfarben ändert und dann Invalidate aufruft, und diese Methode aufrufen, wenn Sie wissen, dass sich die Daten geändert haben und das Grid aktualisiert werden muss.
Bitte beachten Sie, dass die genaue Lösung von den spezifischen Anforderungen Ihrer Anwendung abhängt. Ich hoffe, das hilft! Wenn Sie weitere Fragen haben, lassen Sie es mich bitte wissen. Ich bin hier, um zu helfen.
Ja, das ist korrekt. Die CellColoring-Ereignisbehandlungsroutine wird nicht durch das WM_PAINT-Ereignis ausgelöst, sondern wird aufgerufen, wenn die Zelle gezeichnet wird. Daher sollte es sicher sein, die Invalidate-Methode innerhalb der CellColoring-Ereignisbehandlungsroutine aufzurufen. Dies wird das Grid dazu veranlassen, sich selbst neu zu zeichnen, einschließlich des erneuten Aufrufs von CellColoring für jede Zelle, aber es sollte keine Endlosschleife erzeugen, da Invalidate nicht dazu führt, dass CellColoring direkt aufgerufen wird. Es markiert lediglich das Grid als “ungültig”, so dass es beim nächsten Zeichnen des Fensters neu gezeichnet wird. 


//---------------------------

Quelle:
Edit Events - Topics (bergsoft.net) 

und auch gut: 
Optimizing NextGrid6 - Topics (bergsoft.net) 

// OnBeforeEdit event handler
void __fastcall TForm1::NextGrid61BeforeEdit(TObject *Sender, int ACol, int ARow, bool &Accept, WideString &Text)
{
    // Set default text inside edit in case if cell is empty
    if (Text == L"") Text = L"Default";

    // Prevent editing first 2 rows
    if (ARow < 2) Accept = false;
}

// OnGetInplaceEdit event handler
void __fastcall TForm1::NextGrid61GetInplaceEdit(TObject *Sender, int ACol, int ARow, _di_INxInplaceEdit &InplaceEdit)
{
    if (ACol == 1)
    {
        // Set InplaceEdit var arg.
        InplaceEdit = new TListBoxEdit(this);
    }
}

// OnInplaceEditInsert event handler
void __fastcall TForm1::NextGrid61InplaceEditInsert(TObject *Sender, int ACol, int ARow, TComponent* Component)
{
    if (ACol == 1)
    {
        TListBoxEdit *listBoxEdit = dynamic_cast<TListBoxEdit*>(Component);
        if (listBoxEdit != nullptr)
        {
            listBoxEdit->Items->Add("George");
            listBoxEdit->Items->Add("Lucia");
            listBoxEdit->Items->Add("Michael");
            listBoxEdit->Items->Add("Ann");
            listBoxEdit->Items->Add("Ben");
        }
    }
}

// OnInplaceEditBounds event handler
void __fastcall TForm1::NextGrid61InplaceEditBounds(TObject *Sender, int ACol, int ARow, TComponent* Component, TRect &EditRect)
{
    if ((ACol == 1) && (NextGrid61->Columns->Items[ACol]->Width < 60))
    {
        EditRect.Right += 20;
    }
}

// OnAcceptEdit event handler
void __fastcall TForm1::NextGrid61AcceptEdit(TObject *Sender, int ACol, int ARow, WideString &Text, bool &Accept, bool &CanLeave)
{
    // Do not allow empty text to be transferred.
    if (Text.Trim() == L"")
    {
        Accept = false; // Value is not accepted
        Text = L"default"; // Inject default value into edit
        CanLeave = false; // Prevent leaving editing state
        MessageBeep(MB_ICONWARNING); // Alert user with sound
    }
}


//-----------------------------------------

void Tdsmainform::NextGrid1CellFormating(TObject* Sender, int ACol, int ARow, TColor& TextColor, TFontStyles& FontStyle, TCellState CellState)
{
    if (NextGrid1->Cells[4][ARow] == "Yes")
    {
        TextColor = clGreen;
        NextGrid1->Cells[ACol][ARow].Color = clYellow;
    }
    else
    {
        TextColor = clRed;
        NextGrid1->Cells[ACol][ARow].Color = clBlack;
    }
}

//---------- besser trennen

void __fastcall Tdsmainform::NextGrid1CellColoring(TObject *Sender, int ACol, int ARow, TGridDrawState State, TColor &Color)
{
    if (NextGrid1->Cells[4][ARow] == "Yes")
    {
        Color = clYellow;
    }
    else
    {
        Color = clBlack;
    }
}

//-------

void __fastcall Tdsmainform::NextGrid1CellFormating(TObject *Sender, int ACol, int ARow, TFontStyles &FontStyle, TColor &FontColor, Grids::TGridDrawState State, bool &DefaultDrawing)
{
    if (NextGrid1->Cells[4][ARow] == "Yes")
    {
        FontColor = clGreen;
    }
    else
    {
        FontColor = clRed;
    }
}

-----------

procedure TForm1.NextDBGrid1CellColoring(Sender: TObject; ACol, ARow: Integer; var CellColor, GridColor: TColor; CellState: TCellState); begin if (ARow < NextDBGrid1.RowCount) then begin if (not (csSelected in CellState)) and (ARow mod 2 = 0) then CellColor := RGB(245, 245, 245); end; end;" Was ist mit dem not (csEmpty in CellState) nutzen ?. Bitte in C++ den Code
Copilot
das webwird verwendet
Sicher, Sie können csEmpty in CellState verwenden, um zu überprüfen, ob eine Zelle leer ist. Hier ist, wie Sie den gegebenen Delphi-Code in C++ für C++ Builder übersetzen könnten:

void __fastcall TForm1::NextDBGrid1CellColoring(TObject *Sender, int ACol, int ARow, TColor &CellColor, TColor &GridColor, TGridDrawState CellState)
{
    if (ARow < NextDBGrid1->RowCount)
    {
        if (!(CellState.Contains(gdSelected)) && !(CellState.Contains(gdEmpty)) && ARow % 2 == 0)
            CellColor = RGB(245, 245, 245);
    }
}

___


void __fastcall TForm1::NextDBGrid1DrawColumnCell(TObject *Sender, const TRect &Rect, int DataCol, TColumn *Column, TGridDrawState State)
{
    // Überprüfen Sie, ob dies die Zeile ist, die Sie einfärben möchten
    if (ARow == DieZeileDieSieEinfärbenMöchten)
    {
        // Setzen Sie die Pinsel- und Schriftfarbe des Canvas
        NextDBGrid1->Canvas->Brush->Color = DieFarbeDieSieVerwendenMöchten;
        NextDBGrid1->Canvas->Font->Color = clWhite;

        // Füllen Sie das Rechteck der Zelle mit der Pinsel- und Schriftfarbe
        NextDBGrid1->Canvas->FillRect(Rect);

        // Zeichnen Sie den Text der Zelle
        NextDBGrid1->Canvas->TextOut(Rect.Left, Rect.Top, Column->Field->AsString);
    }
}

___

Ja, das ist korrekt. Im Kontext von TNextDBGrid und ähnlichen Steuerelementen in C++ Builder und Delphi bezieht sich das Canvas auf die Zeichenfläche des Steuerelements, auf der Sie zeichnen können. Wenn Sie in der OnDrawColumnCell-Ereignisbehandlungsroutine arbeiten, bezieht sich das Canvas auf die Zeichenfläche der aktuellen Zelle.
Wenn Sie jedoch die gleiche Farbe und den gleichen Stil für alle Zellen in einer Zeile verwenden, wird der Effekt so aussehen, als ob Sie auf die gesamte Zeile gezeichnet hätten. Das liegt daran, dass die OnDrawColumnCell-Ereignisbehandlungsroutine für jede Zelle in der Zeile aufgerufen wird, und wenn Sie für jede Zelle die gleiche Formatierung anwenden, wird die gesamte Zeile einheitlich formatiert erscheinen. Ich hoffe, das hilft! Wenn Sie weitere Fragen haben, lassen Sie es mich bitte wissen. Ich bin hier, um zu helfen.
