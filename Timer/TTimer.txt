#include <vcl.h>
#pragma hdrstop
#include "Unit1.h"
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;

int requestCount = 0;

__fastcall TForm1::TForm1(TComponent* Owner)
    : TForm(Owner)
{
}

void __fastcall TForm1::CheckBoxClick(TObject *Sender)
{
    if (CheckBox1->Checked || CheckBox2->Checked)
    {
        // Hintergrundaktion ausf√ºhren
        PerformBackgroundAction();

        // Checkboxen zur√ºcksetzen
        CheckBox1->Checked = false;
        CheckBox2->Checked = false;

        // Anfragez√§hler erh√∂hen
        requestCount++;

        // √úberpr√ºfen, ob 10 Anfragen erreicht wurden
        if (requestCount >= 10)
        {
            ShowMessage("10 Anfragen abgeschlossen. OK-Button wird angezeigt.");
            // OK-Button anzeigen (hier als Beispiel eine MessageBox)
            // Du kannst auch einen tats√§chlichen Button anzeigen lassen
        }
    }
}

void TForm1::PerformBackgroundAction()
{
    // Hier die gew√ºnschte Hintergrundaktion implementieren
}




//==================================


#include <vcl.h>
#pragma hdrstop
#include "Unit1.h"
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;

int requestCount = 0;

__fastcall TForm1::TForm1(TComponent* Owner)
    : TForm(Owner)
{
}

void __fastcall TForm1::CheckBoxClick(TObject *Sender)
{
    if (CheckBox1->Checked || CheckBox2->Checked)
    {
        // Timer deaktivieren
        Timer1->Enabled = false;

        // Hintergrundaktion ausf√ºhren
        PerformBackgroundAction();

        // Checkboxen zur√ºcksetzen
        CheckBox1->Checked = false;
        CheckBox2->Checked = false;

        // Anfragez√§hler erh√∂hen
        requestCount++;

        // √úberpr√ºfen, ob 10 Anfragen erreicht wurden
        if (requestCount >= 10)
        {
            ShowMessage("10 Anfragen abgeschlossen. OK-Button wird angezeigt.");
            // OK-Button anzeigen (hier als Beispiel eine MessageBox)
            // Du kannst auch einen tats√§chlichen Button anzeigen lassen
        }

        // Timer wieder aktivieren
        Timer1->Enabled = true;
    }
}

void TForm1::PerformBackgroundAction()
{
    // Hier die gew√ºnschte Hintergrundaktion implementieren
}

void __fastcall TForm1::Timer1Timer(TObject *Sender)
{
    // Timer-Routine hier implementieren
    // Diese Routine wird nur ausgef√ºhrt, wenn der Timer aktiviert ist
}


//=========================================================

#include <vcl.h>
#pragma hdrstop
#include "Unit1.h"
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;

TMSConnection *MSConnection;
TTimer *ConnectTimer;
int attemptCount = 0;

__fastcall TForm1::TForm1(TComponent* Owner)
    : TForm(Owner)
{
    // TMSConnection-Instanz erstellen und initialisieren
    MSConnection = new TMSConnection(this);
    MSConnection->ConnectionString = "your_connection_string_here";
    MSConnection->LoginPrompt = false;

    // TTimer zur Laufzeit erstellen
    ConnectTimer = new TTimer(this);
    ConnectTimer->Interval = 80; // 80 ms
    ConnectTimer->OnTimer = ConnectTimerTimer;
    ConnectTimer->Enabled = true;
}

void __fastcall TForm1::ConnectTimerTimer(TObject *Sender)
{
    attemptCount++;
    try
    {
        MSConnection->Connected = true;
        ShowMessage("Verbindung erfolgreich hergestellt!");
        ConnectTimer->Enabled = false; // Timer stoppen
    }
    catch (Exception &e)
    {
        if (attemptCount >= 10)
        {
            ShowMessage("Verbindung konnte nach 10 Versuchen nicht hergestellt werden.");
            ConnectTimer->Enabled = false; // Timer stoppen
        }
    }
}

//--------------------------------------------

//2 Dezember

Hallo! Du kannst einen zweiten Timer innerhalb einer Timer-Routine starten, indem du den zweiten Timer in der Routine initialisierst und aktivierst. Hier ist ein Beispiel, wie du das in C++03 im C++ Builder machen kannst:

cpp
#include <vcl.h>
#pragma hdrstop

TTimer *Timer2;

void __fastcall TRoutine1(TObject *Sender) {
    // Erstelle und konfiguriere den zweiten Timer
    Timer2 = new TTimer(NULL);
    Timer2->Interval = 1000; // Setze das Intervall auf 1000 Millisekunden (1 Sekunde)
    Timer2->OnTimer = Timer2Routine; // Setze die Ereignisroutine f√ºr den zweiten Timer
    Timer2->Enabled = true; // Aktiviere den zweiten Timer
}

void __fastcall Timer2Routine(TObject *Sender) {
    // Hier kommt der Code f√ºr die Arbeit des zweiten Timers
    // ...

    // Deaktiviere den zweiten Timer, wenn die Arbeit erledigt ist
    Timer2->Enabled = false;
    delete Timer2;
    Timer2 = NULL;
}
In diesem Beispiel wird der zweite Timer Timer2 innerhalb der Routine TRoutine1 erstellt und gestartet. Die Routine Timer2Routine wird aufgerufen, wenn der zweite Timer abl√§uft. Nachdem die Arbeit des zweiten Timers erledigt ist, wird der Timer deaktiviert und gel√∂scht.

Ich hoffe, das hilft! Lass mich wissen, ob du noch weitere Fragen hast. üòä

Ist es denn Ok wenn jedesmal im ersten Timer allokiert wird ? Ich wei√ü in Timer2Routine wird die allokation ja aufgehoben. Ist das zeitlich immer sicher so ?
Das ist eine berechtigte Frage. Die Allokation und Deallokation eines Timers in jeder Ausf√ºhrung der ersten Timer-Routine kann zu einem gewissen Overhead f√ºhren, aber in den meisten F√§llen sollte das zeitlich sicher und effizient genug sein, solange die Intervalle nicht extrem kurz sind.

Wenn du sicherstellen m√∂chtest, dass der zweite Timer seine Arbeit vollst√§ndig verrichtet, bevor die Routine beendet wird, kannst du eine einfache Synchronisationsmethode verwenden. Hier ist ein Beispiel, wie du das machen k√∂nntest:

cpp
#include <vcl.h>
#pragma hdrstop

TTimer *Timer2;
bool Timer2Completed = false;

void __fastcall TRoutine1(TObject *Sender) {
    // Erstelle und konfiguriere den zweiten Timer
    Timer2 = new TTimer(NULL);
    Timer2->Interval = 1000; // Setze das Intervall auf 1000 Millisekunden (1 Sekunde)
    Timer2->OnTimer = Timer2Routine; // Setze die Ereignisroutine f√ºr den zweiten Timer
    Timer2->Enabled = true; // Aktiviere den zweiten Timer

    // Warte, bis der zweite Timer seine Arbeit verrichtet hat
    while (!Timer2Completed) {
        Application->ProcessMessages();
    }

    // Setze den Status zur√ºck
    Timer2Completed = false;
}

void __fastcall Timer2Routine(TObject *Sender) {
    // Hier kommt der Code f√ºr die Arbeit des zweiten Timers
    // ...

    // Deaktiviere den zweiten Timer, wenn die Arbeit erledigt ist
    Timer2->Enabled = false;
    delete Timer2;
    Timer2 = NULL;

    // Setze den Status auf abgeschlossen
    Timer2Completed = true;
}
In diesem Beispiel wird eine boolesche Variable Timer2Completed verwendet, um den Status des zweiten Timers zu √ºberwachen. Die erste Timer-Routine wartet, bis der zweite Timer seine Arbeit abgeschlossen hat, bevor sie fortf√§hrt.

