#include <System.Classes.hpp>
#include <Data.DB.hpp>
#include <Vcl.Grids.hpp>
#include <Vcl.DBGrids.hpp>
#include <memory>

class TForm1 : public TForm
{
__published:
    TDBGrid *DBGrid1;
    TDataSource *DataSource1;
    TClientDataSet *ClientDataSet1;
    void __fastcall FormCreate(TObject *Sender);

private:
    void __fastcall ProcessNodePlus(IXMLDOMNode* pNode);

public:
    __fastcall TForm1(TComponent* Owner);
};

std::unique_ptr<TForm1> Form1;

__fastcall TForm1::TForm1(TComponent* Owner) : TForm(Owner)
{
}

void __fastcall TForm1::FormCreate(TObject *Sender)
{
    // Felder im ClientDataSet definieren
    ClientDataSet1->FieldDefs->Clear();
    ClientDataSet1->FieldDefs->Add("NodeName", ftString, 50);
    ClientDataSet1->FieldDefs->Add("NodeValue", ftString, 255);
    ClientDataSet1->CreateDataSet();

    // Prozessieren des XML-Dokuments und Hinzufügen der Daten zum ClientDataSet
    // Beispiel: ProcessNodePlus(rootNode);
}

void __fastcall TForm1::ProcessNodePlus(IXMLDOMNode* pNode)
{
    // Extrahieren des Knotennamens und des Knotenwerts
    BSTR nodeName, nodeValue;
    pNode->get_nodeName(&nodeName);
    pNode->get_text(&nodeValue);

    // Einfügen der Daten in das ClientDataSet
    ClientDataSet1->Insert();
    ClientDataSet1->FieldByName("NodeName")->AsString = nodeName;
    ClientDataSet1->FieldByName("NodeValue")->AsString = nodeValue;
    ClientDataSet1->Post();

    // Freigeben der Speicherressourcen
    SysFreeString(nodeName);
    SysFreeString(nodeValue);

    // Verarbeiten der Kindknoten
    IXMLDOMNodeList* pChildren;
    pNode->get_childNodes(&pChildren);
    long length;
    pChildren->get_length(&length);

    for (long i = 0; i < length; i++) {
        IXMLDOMNode* pChild;
        pChildren->get_item(i, &pChild);
        ProcessNodePlus(pChild);
    }
}
